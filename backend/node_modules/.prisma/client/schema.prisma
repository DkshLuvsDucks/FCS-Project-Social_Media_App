datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique @db.VarChar(255)
  mobile              String?   @unique @db.VarChar(15)
  passwordHash        String    @db.Char(60)
  username            String    @unique @db.VarChar(50)
  role                UserRole  @default(USER)
  twoFactorEnabled    Boolean   @default(false)
  twoFactorSecret     String?   @db.VarChar(32)
  lastPasswordReset   DateTime?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  isBanned            Boolean   @default(false)
  bannedAt            DateTime?
  bio                 String?   @db.Text
  userImage           String?   @db.VarChar(2048)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  logins           Login[]
  posts            Post[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  chatRoomsAsUser1 ChatRoom[] @relation("user1")
  chatRoomsAsUser2 ChatRoom[] @relation("user2")
  sessions         Session[]
}

model Login {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  sessionId         String   @db.VarChar(128)
  loginTime         DateTime @default(now())
  ipAddress         String   @db.VarChar(45)
  userAgent         String   @db.Text
  deviceFingerprint String   @db.VarChar(64)
  geoLocation       String?  @db.VarChar(50)
  successful        Boolean  @default(true)

  @@index([sessionId])
  @@index([loginTime])
}

model Post {
  id             Int       @id @default(autoincrement())
  content        String    @db.Text
  mediaHash      String?   @db.Char(64)
  author         User      @relation(fields: [authorId], references: [id])
  authorId       Int
  createdAt      DateTime  @default(now())
  editedAt       DateTime?
  editHistory    String?   @db.Text
  isEncrypted    Boolean   @default(false)
  encryptionType String?   @db.VarChar(20)
  iv             String?   @db.VarChar(24)
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("user1", fields: [user1Id], references: [id])
  user1Id   Int
  user2     User     @relation("user2", fields: [user2Id], references: [id])
  user2Id   Int
  createdAt DateTime @default(now())
  active    Boolean  @default(true)

  @@unique([user1Id, user2Id])
  @@index([createdAt])
}

model Message {
  id               Int      @id @default(autoincrement())
  encryptedContent String   @db.Text
  iv               String   @db.VarChar(24)
  algorithm        String   @db.VarChar(20)
  hmac             String   @db.Char(64)
  senderId         Int
  sender           User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId       Int
  receiver         User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  read             Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([senderId, receiverId])
  @@index([createdAt])
}

model Session {
  id           String   @id @db.VarChar(128)
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  expiresAt    DateTime
  lastActivity DateTime @default(now())
  userAgent    String   @db.Text
  ipAddress    String   @db.VarChar(45)

  @@index([expiresAt])
}
