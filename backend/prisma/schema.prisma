datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

model User {
  id                  Int         @id @default(autoincrement())
  email               String      @unique @db.VarChar(255)
  mobile              String?     @unique @db.VarChar(15)
  passwordHash        String      @db.Char(60)
  username            String      @unique @db.VarChar(50)
  role                UserRole    @default(USER)
  twoFactorEnabled    Boolean     @default(false)
  twoFactorSecret     String?     @db.VarChar(32)
  lastPasswordReset   DateTime?
  failedLoginAttempts Int         @default(0)
  lockedUntil         DateTime?
  isBanned            Boolean     @default(false)
  bannedAt            DateTime?
  bio                 String?     @db.Text
  userImage           String?     @db.VarChar(2048)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  lastLogin           DateTime?

  logins       Login[]
  posts        Post[]
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  chatRoomsAsUser1 ChatRoom[] @relation("user1")
  chatRoomsAsUser2 ChatRoom[] @relation("user2")
  sessions     Session[]
  followers    Follows[] @relation("following")
  following    Follows[] @relation("followers")
}

model Login {
  id                Int       @id @default(autoincrement())
  user              User      @relation(fields: [userId], references: [id])
  userId            Int
  sessionId         String    @db.VarChar(128)
  loginTime         DateTime  @default(now())
  ipAddress         String    @db.VarChar(45)
  userAgent         String    @db.Text
  deviceFingerprint String    @db.VarChar(64)
  geoLocation       String?   @db.VarChar(50)
  successful        Boolean   @default(true)

  @@index([sessionId])
  @@index([loginTime])
}

model Post {
  id            Int       @id @default(autoincrement())
  content       String    @db.Text
  mediaHash     String?   @db.Char(64)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      Int
  createdAt     DateTime  @default(now())
  editedAt      DateTime?
  editHistory   String?   @db.Text
  isEncrypted   Boolean   @default(false)
  encryptionType String?  @db.VarChar(20)
  iv            String?   @db.VarChar(24)
}

model ChatRoom {
  id          Int       @id @default(autoincrement())
  user1       User      @relation("user1", fields: [user1Id], references: [id])
  user1Id     Int
  user2       User      @relation("user2", fields: [user2Id], references: [id])
  user2Id     Int
  createdAt   DateTime  @default(now())
  active      Boolean   @default(true)

  @@unique([user1Id, user2Id])
  @@index([createdAt])
}

model Message {
  id               Int      @id @default(autoincrement())
  senderId        Int
  createdAt       DateTime @default(now())
  read            Boolean  @default(false)
  receiverId      Int
  updatedAt       DateTime @updatedAt
  algorithm       String?  @db.VarChar(255)
  encryptedContent String?  @db.Text
  hmac            String?  @db.Text
  iv              String?  @db.Text
  authTag         String?  @db.Text
  isEdited        Boolean  @default(false)
  deletedForReceiver Boolean @default(false)
  deletedForSender Boolean @default(false)
  content         String?  @db.Text
  mediaUrl        String?  @db.VarChar(2048)
  mediaType       String?  @db.VarChar(50)
  mediaEncrypted  Boolean  @default(false)
  replyToId       Int?
  replyTo         Message? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies         Message[] @relation("MessageReplies")
  sender          User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver        User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId, receiverId])
  @@index([createdAt])
  @@index([replyToId])
}

model Session {
  id           String    @id @db.VarChar(128)
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  expiresAt    DateTime
  lastActivity DateTime  @default(now())
  userAgent    String    @db.Text
  ipAddress    String    @db.VarChar(45)

  @@index([expiresAt])
}

model Follows {
  follower    User     @relation("followers", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
} 