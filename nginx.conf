# Load ModSecurity module
load_module modules/ngx_http_modsecurity_module.so;

user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Mime types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Logging Settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # ModSecurity configuration
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity/main.conf;

    # Virtual Host Configs
    
    # Frontend Server
    server {
        listen 80;
        listen [::]:80;
        server_name vendr.app www.vendr.app;
        
        # Redirect HTTP to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name vendr.app www.vendr.app;

        # SSL Certificate
        ssl_certificate /etc/nginx/ssl/vendr.crt;
        ssl_certificate_key /etc/nginx/ssl/vendr.key;
        
        # Frontend static files
        root /var/www/vendr/frontend/dist;
        index index.html;
        
        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: blob:; style-src 'self' 'unsafe-inline'; font-src 'self'; connect-src 'self' https://localhost:3000 wss://localhost:3000";

        # Frontend application
        location / {
            try_files $uri $uri/ /index.html;
            expires 1h;
        }

        # API Proxy to Backend with ModSecurity WAF
        location /api {
            # Enable ModSecurity for API routes
            modsecurity on;
            # Apply SQLi protection rules
            modsecurity_rules '
                SecRule REQUEST_URI "@contains /api" "id:1001,phase:1,pass,nolog,ctl:ruleEngine=On"
                SecRule REQUEST_METHOD "POST|PUT|PATCH" "chain,id:1002,phase:2,deny,status:403,log,msg:\'SQL Injection Attempt\'"
                SecRule REQUEST_BODY "@rx [\'\"\\-][\\s]*([;]|((union|select|insert|update|delete|replace|truncate)\\s)|drop)" "t:lowercase"
            ';
            
            proxy_pass https://127.0.0.1:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Allow Prisma migrations to work normally
        location /_prisma {
            # Disable ModSecurity for Prisma routes
            modsecurity off;
            
            proxy_pass https://127.0.0.1:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket Proxy for Socket.io
        location /socket.io {
            proxy_pass https://127.0.0.1:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Cache static assets
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
        
        # Upload files
        location /uploads {
            proxy_pass https://127.0.0.1:3000/uploads;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            client_max_body_size 10M;
        }
    }

    # Backend Server
    server {
        listen 3000 ssl http2;
        listen [::]:3000 ssl http2;
        server_name vendr.app www.vendr.app;
        
        # SSL Certificate
        ssl_certificate /etc/nginx/ssl/vendr.crt;
        ssl_certificate_key /etc/nginx/ssl/vendr.key;
        
        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # Proxy requests to Node.js backend
        location / {
            proxy_pass http://127.0.0.1:3001; # Node.js backend running on 3001
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            client_max_body_size 10M;
        }
    }
} 